{"version":3,"sources":["components/widgets/newsSlider/slider_templates.js","config.js","components/widgets/newsSlider/slider.js","components/widgets/buttons/button.js","components/widgets/CardInfo/cardInfo.js","components/widgets/NewsList/newsList.js","components/widgets/VideosList/videoTemplate.js","components/widgets/VideosList/videosList.js","components/home/home.js","components/header/sidenav/sideNav_items.js","components/header/sidenav/sideNav.js","components/header/header.js","components/footer/footer.js","hoc/layout/layout.js","components/articles/elements/teamInfo.js","components/articles/elements/postData.js","components/articles/news/post/header.js","components/articles/news/post/body.js","components/articles/news/post/index.js","components/articles/videos/video/header.js","components/widgets/VideosList/videosRelated/videosRelated.js","components/articles/videos/video/index.js","components/articles/news/main/mainNews.js","components/articles/videos/videoMain/videoMain.js","routes.js","index.js"],"names":["SliderTemplates","props","template","settings","Object","objectSpread","dots","infinite","arrows","speed","slidesToShow","slidesToScroll","autoplay","autoplaySpeed","type","data","map","item","i","react_default","a","createElement","key","className","style","background","concat","image","Link","to","id","title","lib_default","CURRENT_YEAR","Date","getFullYear","URL","NewsSlider","state","news","_this2","this","axios","get","start","amount","then","response","setState","slider_templates","Component","Button","onClick","loadMore","cta","linkTo","CardInfo","teams","team","find","name","teamName","react_fontawesome_lib_default","date","NewsList","items","_this","end","request","length","toConsumableArray","renderNews","react_transition_group","classNames","enter","enterActive","timeout","CardInfo_cardInfo","component","widgets_buttons_button","VideoTemplate","VideosList","videos","renderTitle","renderVideos","videoTemplate","renderButton","loadmore","loadType","Home","newsSlider_slider","newsList","VideosList_videosList","SideNavItems","icon","text","link","SideNavigation","simple_sidenav_default","showNav","onHideNav","navStyle","maxWidth","sideNav_items","Header","sideNav","onOpenNav","color","padding","cursor","logo","alt","src","Footer","Layout","toggleSidenav","action","header","children","footer_footer","TeamInfo","city","stats","wins","defeats","PostData","author","teamData","elements_teamInfo","elements_postData","Body","articleTitle","articleImage","articleBody","NewsArticles","article","match","params","post_header","body","VideosRelated","VideoArticle","related","getRelated","video_header","width","height","url","videosRelated","MainNews","VideosMain","Routes","layout_layout","Switch","Route","path","exact","NewsMain","NewsArticle","ReactDOM","render","BrowserRouter","routes","document","getElementById"],"mappings":"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","file":"static/js/main.006c320d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Slick from 'react-slick'\r\n\r\nimport './slider.css'\r\n\r\n/*\r\n    1) We import Slick that we installed in the begining of the project \r\n    and just a note that is really important is that we've put a CSS\r\n    link in the HTML file for Slick without which this is not going to work\r\n\r\n    2) First we need to configure Slick that is why we create a \r\n    variable called settings with pretty self-explanatory values amd\r\n    then inside Slick we make a reference to settings by writing \r\n    {..settings} and now the 3 divs are changing based on the settings\r\n\r\n    3) Static divs though is not a good practice so we are going to create\r\n    a template that is why we create a variable called template and\r\n    set it equal to null\r\n\r\n    4) We go to slider.js and inside the SliderTemplate tag we create\r\n    an instance type and set it equal to featured so we can use that \r\n    for the next step \r\n\r\n    5) We create a switch and inside we use props.type to access\r\n    different types and for case we set type to be equal to featured\r\n    as we might want to have different sliders\r\n\r\n    6) Now in the case of featured we set template equal to props.data\r\n    which is going to access the data from the JSON file that we've\r\n    passed in the slider.js file and then .map which is go going to\r\n    get trough all the items and it is going to return the template\r\n    that we want to return and also we create a CSS file to style it\r\n\r\n    7) Go to home.js 4)\r\n\r\n    8) in order to change dots which was done in home.js we need to \r\n    add to settings ...props.settings and now the dots will be set\r\n    to false and they would disappear \r\n\r\n    9) Go to home.js 10) \r\n*/\r\n\r\nconst SliderTemplates = (props) => {\r\n\r\n    let template = null\r\n\r\n    const settings = {\r\n        dots: true,\r\n        infinite: true,\r\n        arrows: false,\r\n        speed: 500,\r\n        slidesToShow: 1,\r\n        slidesToScroll: 1,\r\n        autoplay: true,\r\n        autoplaySpeed: 4000,\r\n        ...props.settings\r\n    }\r\n\r\n    switch(props.type){\r\n        case('featured'):\r\n            template = props.data.map( (item, i) => {\r\n                return(\r\n                    <div key = {i}>\r\n                        <div className = \"featured_item\">\r\n                            <div className = \"featured_image\"\r\n                                style = {{\r\n                                    background:`url(../images/articles/${item.image})`\r\n                                }}\r\n                            ></div>\r\n                        <Link to = {`articles/${item.id}`}>\r\n                                <div className = \"featured_caption\">\r\n                                    {item.title}\r\n                                </div>\r\n                        </Link>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n            break\r\n        default:\r\n            template = null\r\n    }\r\n\r\n    return(\r\n        <Slick {...settings}>\r\n            {template}\r\n        </Slick>\r\n    )\r\n}\r\n\r\nexport default SliderTemplates","const CURRENT_YEAR = (new Date()).getFullYear()\r\nconst URL = `http://localhost:3004`\r\n\r\nexport {\r\n    CURRENT_YEAR,\r\n    URL\r\n}","import React, { Component } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\nimport SliderTemplates from './slider_templates'\r\n\r\nimport { URL } from '../../../config'\r\n\r\n/*\r\n    1) We have to figure out a way to get the JSON database from the\r\n    JSON file to here and the way we do it is with the componentWillMount\r\n    function and inside we are going to use axios which we first need\r\n    to install with the following command npm install axios --save\r\n    and then we need to import it \r\n\r\n    2) Now inside componentWillMount we write axios.get and inside \r\n    get we copy the address of the place from which we want to get\r\n    the information from the place where we get the URL from is \r\n    after we start the JSON server we get a couple of URLs and we\r\n    get the address from the terminal\r\n\r\n    3) Now we have the information but we need a way to actually catch \r\n    it somehow and that is why we write .then and inside we create \r\n    a function response => {...} and inside the function we can get\r\n    access to the data by typing console.log(response.data) but this\r\n    is just a way to test if we actually get what we need to get\r\n    something that we desire is to use the information from axios.get\r\n    and the way we do it is by typing this.setState and now we can\r\n    change the state of news by setting it to response.data \r\n\r\n    4) In order to limit what it shows because in real life we might\r\n    have a database with thousands of items we might want to load just \r\n    the last 3 so we add to the link ?_start=0&_end=3 which means\r\n    that we are going to start from index 0 and we are going to move to \r\n    index 3\r\n\r\n    5) In the render we write SliderTemplate which is going to be \r\n    a component that we are going to create now in the same folder\r\n    we create a file called slider_template.js and inside we create\r\n    the SLiderTemplate component export it and then we import it \r\n    in this file \r\n\r\n    6) In the slider_template.js the function that creates the component\r\n    is with props becase we want the component to recieve the \r\n    information from this file and to make sure that this is happening\r\n    inside the SliderTemplate tag we add data = {this.state.news}\r\n\r\n    7) Go to slider_template.js 1)\r\n\r\n    8) Here instead of having a static type featured we are going to\r\n    pass the type from home.js trough props \r\n\r\n    9) Go to home.js 6)\r\n\r\n    10) Now that we have passed props from home.js to this file we\r\n    can use it in the template string by writing ${this.props.start}\r\n    and that would give us more freedom and reusability \r\n\r\n    11) Go to home.js 8)\r\n\r\n    12) Now with the new props of settings we can add it to the \r\n    SliderTemplate tag but that is not going to change dots to false\r\n    if we want to change it we need to do one more thing \r\n\r\n    13) Go to slider_template.js 8)\r\n\r\n    14) Since we created the variable URL in config.js we can use the\r\n    URL here as well we first import it and then we paste in axios.get...\r\n    at the appropriate place\r\n\r\n    15) Go to newsList.js 4)\r\n*/\r\n\r\nclass NewsSlider extends Component {\r\n\r\n    state = {\r\n        news:[]\r\n    }\r\n\r\n    componentWillMount(){\r\n        axios.get(`${URL}/articles?_start=${this.props.start}&_end=${this.props.amount}`)\r\n        .then( response => {\r\n            this.setState({\r\n                news:response.data\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <SliderTemplates data = {this.state.news} type = {this.props.type} settings = {this.props.settings}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewsSlider","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './button.css'\r\n\r\n/*\r\n    1) We create everything that we need to create we import the necesarry\r\n    libraries, we return whatever we want to return we export it and then\r\n    we import it in newsList.js and we also create a CSS file which we\r\n    also import \r\n\r\n    2) Then we just want to return a template of the button we want\r\n    againwith switch etc. that's why we create a variable called\r\n    template and then witht the switch we look for the type again so\r\n    we take props.type and we take type from newsList and we set the\r\n    case for type = loadMore and we do a default where the template\r\n    will be equal to null and then we return the template after we\r\n    determine the case\r\n\r\n    3) In case of loadMore we just return a div with className blue-btn\r\n    and onClick the button is going t trigger props.loadMore which \r\n    calls the loadMore function in newsList and finally as content\r\n    we put props.cta and now all we have to do is style the button\r\n\r\n    4) Go to newsList.js 16)\r\n\r\n    5) We just add a new case for linkTo\r\n\r\n    6) Go to videoList 6)\r\n*/\r\n\r\nconst Button = (props) => {\r\n\r\n    let template = null\r\n\r\n    switch(props.type){\r\n        case 'loadMore':\r\n            template = (\r\n                <div className = \"blue_btn\"\r\n                    onClick = {props.loadMore}\r\n                >\r\n                    {props.cta}\r\n                </div>\r\n            )\r\n            break\r\n        case 'linkTo':\r\n            template = (\r\n                <Link \r\n                    to = {props.linkTo}\r\n                    className = \"blue_btn\"\r\n                >\r\n                    {props.cta}\r\n                </Link>\r\n            )\r\n            break\r\n        default:\r\n            template = null\r\n    }\r\n\r\n    return template\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport FontAwesome from 'react-fontawesome'\r\n\r\nimport './cardInfo.css'\r\n\r\n/*\r\n    1) We use the props that we have from newsList.js so we can get dynamic \r\n    values for the the date  and we get those from the JSON file\r\n\r\n    2) Then in order to output the correct name of each team we need\r\n    to create a function that is going to find the name of the team\r\n    based on the id that we have we are going to name it teamName \r\n    and the instances that it is going to need is the list of all\r\n    teams and the id of the team that we have in our case all of this\r\n    is stored in props \r\n\r\n    3) So we create the function and inside we use find which is\r\n    going to find if the the item's id is matching any of the teams \r\n    which is called team and if data is true then we return data.name\r\n    which is the name of the team\r\n\r\n    4) Go to home.js 14)\r\n*/\r\n\r\nconst CardInfo = (props) => {\r\n\r\n    const teamName = (teams, team) => {\r\n        let data = teams.find((item)=>{\r\n            return item.id === team\r\n        })\r\n        if(data){\r\n            return data.name\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className = \"cardInfo\">\r\n            <span className = \"teamName\">\r\n                {teamName(props.teams, props.team)}\r\n            </span>\r\n            <span className = \"date\">\r\n                <FontAwesome name = \"clock-o\"/>\r\n                {props.date}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardInfo","import React, { Component } from 'react'\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nimport './newsListStyle.css'\r\n\r\nimport { URL } from '../../../config'\r\n\r\nimport Button from '../buttons/button'\r\nimport CardInfo from '../../widgets/CardInfo/cardInfo'\r\n\r\n/*\r\n    1) First we create the states we create an 'items' array which is going\r\n    to store the articles and then start, end, amount to store the\r\n    starting point, ending point etc.\r\n\r\n    2) In config.js we create a variable called URL which is going to\r\n    store the URL address of the database so we can use it here and\r\n    also in the slider.js file\r\n\r\n    3) Go to slider.js 14)\r\n\r\n    4) then we create componentWillMount method again and with axios\r\n    we set the get method we set the URL we want and after that we \r\n    write .then so we can catch the information being passed and then\r\n    inside we use the setState method to change the items state\r\n\r\n    5) Now when we are changing the state we want to add articles\r\n    to items not overwrite them so first we access the current state\r\n    of the the state items by writing ...this.state.items and then\r\n    to add what we want to add we write ,...response.data \r\n\r\n    6) Then we create a function called renderNews and we call it \r\n    inside the render() method by typing this.renderNews() and inside\r\n    the brackets we write this.props.type so we pass the the type that\r\n    we have written in the NewsList tag in home.js\r\n\r\n    7) The renderNews method takes as an instance the type and inside\r\n    we create different cases but first we create a variable template\r\n    that we set to null and then in the different cases the template\r\n    is going to be different with default of null\r\n\r\n    8) Now our type is card in the home.js so we create the case for \r\n    card and again we use map to loop through all the items in our case\r\n    this is going to be items array from state and for every iteration\r\n    we create a template \r\n\r\n    9) We create the template until the h2 and we put that in a Link\r\n    tag and we also create a CSS file for styling the h2 and the whole\r\n    div\r\n\r\n    10) Now to add the load more button we have to change the code\r\n    a bit so we create a method called request that takes two instances\r\n    start and end and we copy everything from componentWillMount and\r\n    we pase in rquest() and we change this.state.start to just start\r\n    and the same with end and after that in componentWillMount we\r\n    just call the request function by typing this.request and as\r\n    instances we write this.state.start, this.state.end which is \r\n    from the state object which in turn is passed in the NewsList\r\n    tag in home.js\r\n\r\n    11) We add a div in render() and we set the div with onClick that\r\n    when clicked is going to call a function called loadMore which \r\n    we are going to create right now\r\n\r\n    12) Now the loadMore function is going to call request() by taking\r\n    the ending point so far as a starting point (start) so start will\r\n    become this.state.end and the ending point (end) will be be a\r\n    variable that we are going to create again called 'end' that we \r\n    are going to set to this.state.end (the number of articles that\r\n    we have so far) + this.state.amount (the number of articles that\r\n    we want to add)\r\n\r\n    13) Next we add the transitions and that's why we wrap the call\r\n    to renderNews in a TransitionGroup tag and inside the tag we set\r\n    component to div and className to list so this TransitionGroup\r\n    now returns a div so now we need to return a CSSTransition in\r\n    the template that's why wrap everything in the template in a \r\n    CSSTransition tag and inside the opening tag we set the needed\r\n    properties: classNames we set to only for enter and enterActive\r\n    we set the timeout equal to 500 (.5s) and finally we set the key\r\n    since this is an array to i and finally we add the styles of the\r\n    effects in the CSS file\r\n\r\n    14) Since we want to use the button on more than one place we\r\n    are going to create a component out of it so we delete the div\r\n    and we create a Button tag and we pass the following props:\r\n    type = \"loadMore\" which is basically the name of the button, \r\n    loadMore = {() => this.loadMore()} which would call the function\r\n    loadMore and cta = \"Load More News\" which is short for call of \r\n    action that is going to be the text of the button and then we \r\n    create the folder and the file for the Button component called\r\n    button.js\r\n\r\n    15) Go to button.js 1)\r\n\r\n    16) Now in order to get the right team we cannot just say item.team\r\n    because that will output just a number (id) but when we have the\r\n    id we can map it to the actual team so now in the state we \r\n    create a new state called teams which is going to be an empty \r\n    array and then in request we add an if statement that is going to\r\n    check the lenght of the array that is in the state teams and if it\r\n    is less than 1 which it is at the initial stage it is going to execute\r\n    the code inside and this will allow us to fetch the teams just once\r\n    and inisde the code with axious we get the teams and then with\r\n    setState we change the teams array \r\n\r\n    17) Then we need to pass this information to the template so it can\r\n    be output and that's why we need to create a new component where\r\n    we are going to output the information and we are going to call it\r\n    CardInfo and we are going to put it before the h2\r\n\r\n    18) We create the file for the component we import the libraries \r\n    we export the component and import it in this file we add some\r\n    dummmy static values and we create a CSS file and style the \r\n    name of the team and the date\r\n\r\n    19) Then we add props to the CardInfo tag so we can pass it to \r\n    cardInfo.js so we have the teams which we get from request()\r\n    and then team and date that we get from the JSON file \r\n\r\n    20) Go to cardInfo.js 1)\r\n */\r\n\r\nclass NewsList extends Component {\r\n\r\n    state = {\r\n        teams: [],\r\n        items:[],\r\n        start: this.props.start,\r\n        end: this.props.amount + this.props.start,\r\n        amount: this.props.amount\r\n    }\r\n    \r\n    componentWillMount(){\r\n        this.request(this.state.start, this.state.end)\r\n    }\r\n\r\n    request = (start, end) => {\r\n        \r\n        if(this.state.teams.length < 1){\r\n            axios.get(`${URL}/teams`)\r\n            .then( response => {\r\n                this.setState({\r\n                    teams:response.data\r\n                })\r\n            })\r\n        }\r\n\r\n        axios.get(`${URL}/articles?_start=${start}&_end=${end}`)\r\n        .then( response => {\r\n            this.setState({\r\n                items:[...this.state.items,...response.data],\r\n                start, \r\n                end\r\n            })\r\n        })\r\n    }\r\n\r\n    loadMore = () => {\r\n        let end = this.state.end + this.state.amount\r\n        this.request(this.state.end, end)\r\n    }\r\n    \r\n    renderNews = (type) => {\r\n        let template = null\r\n\r\n        switch(type){\r\n            case('card'):\r\n                template = this.state.items.map( (item, i) => (\r\n                    <CSSTransition\r\n                        classNames = {{\r\n                            enter: \"newsList_wrapper\",\r\n                            enterActive: \"newsList_wrapper_enter\"\r\n                        }}\r\n                        timeout = {500}\r\n                        key = {i}\r\n                    >\r\n                        <div>\r\n                            <div className = \"newsList_item\">\r\n                                <Link to = {`/articles/${item.id}`}>\r\n                                    <CardInfo\r\n                                        teams = {this.state.teams}\r\n                                        team = {item.team}\r\n                                        date = {item.date}\r\n                                    />\r\n                                    <h2>{item.title}</h2>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </CSSTransition>\r\n                ))\r\n                break\r\n                case('cardMain'):\r\n                    template = this.state.items.map( (item, i) => (\r\n                        <CSSTransition\r\n                        classNames = {{\r\n                            enter: \"newsList_wrapper\",\r\n                            enterActive: \"newsList_wrapper_enter\"\r\n                        }}\r\n                        timeout = {500}\r\n                        key = {i}\r\n                        >\r\n                            <Link to = {`/articles/${item.id}`}>\r\n                                <div className = \"flex_wrapper\">\r\n                                    <div className = \"left\"\r\n                                        style = {{\r\n                                            background: `url('/images/articles/${item.image}')`\r\n                                        }}\r\n                                    >\r\n                                        <div></div>\r\n                                    </div>\r\n                                    <div className = \"right\">\r\n                                        <CardInfo\r\n                                            teams = {this.state.teams}\r\n                                            team = {item.team}\r\n                                            date = {item.date}\r\n                                        />\r\n                                        <h2>{item.title}</h2>\r\n                                    </div>\r\n                                </div>\r\n                            </Link>\r\n                        </CSSTransition>\r\n                    ))\r\n                    break\r\n            default:\r\n                template = null\r\n        }\r\n\r\n        return template\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div>\r\n                <TransitionGroup\r\n                  component = \"div\"\r\n                  className = \"list\"\r\n                >\r\n                    {this.renderNews(this.props.type)}\r\n                </TransitionGroup>\r\n                \r\n                <Button\r\n                    type = \"loadMore\"\r\n                    loadMore = {() => this.loadMore()}\r\n                    cta = \"Load More News\"\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewsList","import React from 'react'\r\n\r\nimport './videosList.css'\r\n\r\nimport { Link } from 'react-router-dom'\r\nimport CardInfo from '../CardInfo/cardInfo'\r\n\r\n/*\r\n    1) Basically we loop through the data and create a Link for the\r\n    entire section and style it however we want to \r\n\r\n    2) Then we just pass props through CardInfo and we get the date\r\n    of the article and the team so that is really handy \r\n\r\n    3) Go to videosList.js 11)\r\n*/\r\n\r\nconst VideoTemplate = (props) => {\r\n    return props.data.map( (item, i) => {\r\n        return <Link to = {`/videos/${item.id}`} key = {i}>\r\n            <div className = \"videoListItem_wrapper\">\r\n                <div \r\n                    className = \"left\"\r\n                    style = {{\r\n                        background: `url(/images/videos/${item.image})`\r\n                    }}\r\n                >\r\n                    <div></div>\r\n                </div>\r\n                <div className = \"right\">\r\n                    <CardInfo \r\n                        teams = {props.teams}\r\n                        team = {item.team}\r\n                        date = {item.date}\r\n                    />\r\n                    <h2>{item.title}</h2>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    })\r\n}\r\n\r\nexport default VideoTemplate","import React, { Component } from 'react'\r\nimport './videosList.css'\r\nimport axios from 'axios'\r\n\r\nimport { URL } from '../../../config'\r\n\r\nimport Button from '../buttons/button'\r\nimport VideoTemplate from './videoTemplate'\r\n\r\n/*\r\n    1) We create the different states which are pretty similar to the\r\n    states of newsList.js and we alos create a CSS file and import it\r\n\r\n    2) With the props in home.js we pass a prop called title and it\r\n    is set to true and that is why the first step is to create a\r\n    function that is going to decide whether to display the title \r\n    or not so inside the function we are going to check if this.props.title\r\n    is true or not and based on that we are going to display either\r\n    an h3 tag with the title or nothing at all\r\n\r\n    3) Then we create a function that is going to decide whether to\r\n    display the load more button or not and it is pretty much the \r\n    same idea as the last point \r\n\r\n    4) Since we are creating a Button tag in one of the cases we set\r\n    the type to linkTo which we don't have as a different case in \r\n    button.js that's why we need to create it \r\n\r\n    5) Go to button.js 5)\r\n\r\n    6) For the other option we just create a button that triggers a\r\n    function that does nothing for now\r\n\r\n    7) then like we did with newsList.js we create a request function\r\n    and then we call it in componentWillMount\r\n\r\n    8) Then we have to create a function that is going to display the\r\n    videos and inside the function we again create different cases\r\n\r\n    9) Now instead of creating the template inside the case we are\r\n    going to create a new component that is going to hold the template\r\n    so we pass the necessary data as props \r\n\r\n    10) Go to videoTemplate.js 1)\r\n\r\n    11) Now we go back to the loadMore function which was left empty\r\n    before and we are going to create the same thing as we did with\r\n    load more news but there is a problem when we press load more\r\n    we get 3 new videos which is good but when we press the button\r\n    again we get the same videos from 4 to 6 again the way to tackle \r\n    this problem is to update start and end where we update the videos\r\n    array in request()\r\n\r\n    12) We do the same thing in newsList.js \r\n\r\n    13) Go to routes.js 6)\r\n*/\r\n\r\nclass VideosList extends Component {\r\n\r\n    state = {\r\n        teams: [],\r\n        videos: [],\r\n        start: this.props.start,\r\n        end: this.props.start + this.props.amount,\r\n        amount: this.props.amount\r\n    }\r\n\r\n    renderTitle = () => {\r\n        return this.props.title ? \r\n            <h3><strong>NBA</strong> Videos</h3>\r\n            : null\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.request(this.state.start, this.state.end)\r\n    }\r\n\r\n    request = (start, end) => {\r\n        if(this.state.teams.length < 1){\r\n            axios.get(`${URL}/teams`)\r\n            .then( response => {\r\n                this.setState({\r\n                    teams:response.data\r\n                })\r\n            })\r\n        }\r\n\r\n        axios.get(`${URL}/videos?_start=${start}&_end=${end}`)\r\n        .then ( response => {\r\n            this.setState({\r\n                videos:[...this.state.videos,...response.data],\r\n                start, \r\n                end\r\n            })\r\n        })\r\n    }\r\n\r\n    renderVideos = () => {\r\n        let template = null\r\n\r\n        switch(this.props.type){\r\n            case('card'):\r\n                template = <VideoTemplate \r\n                    data = {this.state.videos} \r\n                    teams = {this.state.teams}\r\n                />\r\n                break\r\n            default:\r\n                template = null\r\n        }\r\n        return template\r\n    }\r\n\r\n    loadMore = () => {\r\n        let end = this.state.end + this.state.amount\r\n        this.request(this.state.end, end)\r\n    }\r\n\r\n    renderButton = () => {\r\n        return this.props.loadmore ?\r\n        <Button\r\n            type = \"loadmore\"\r\n            loadType = {() => this.loadMore()}\r\n            cta = \"Load More Videos\"\r\n        />\r\n        :\r\n        <Button \r\n            type = \"linkTo\" \r\n            cta = 'More Videos'\r\n            linkTo = '/videos'\r\n        />\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"videoList_wrapper\">\r\n                { this.renderTitle() }\r\n                { this.renderVideos() }\r\n                { this.renderButton() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideosList","import React from 'react'\r\n\r\nimport NewsSlider from '../widgets/newsSlider/slider'\r\nimport NewsList from '../widgets/NewsList/newsList'\r\nimport VideosList from '../widgets/VideosList/videosList'\r\n\r\n/*\r\n    1) Since what we are trying to create for the home page is a \r\n    reusable component (the slider witht he pics) we are going to\r\n    create it somewhere else so we create a widgets folder in \r\n    the components folder and we create the folders etc. and we \r\n    edn up with a file called slider.js\r\n\r\n    2) Inside the slider.js we create a basic component called NewsSlider\r\n    which we then export and import here \r\n\r\n    3) Go to slider.js 1)\r\n\r\n    4) We set type of NewsSlider to featured \r\n\r\n    5) Go to slider.js 8)\r\n\r\n    6) We add another props in this case start and we set it equal \r\n    to 0 and then amount we set it to 3 and now we can pass the props\r\n    to slider.js \r\n\r\n    7) Go to slider.js 10)\r\n\r\n    8) We can add another props settings which is going to be an object\r\n    and there we can set dots to false which is the contrary to what\r\n    we have in slider_template.js \r\n\r\n    9) Go to slider.js 12) \r\n\r\n    10) Now we can copy the NewsSlider tag and just change the values\r\n    inside and it is going to appear a new slider without too much \r\n    effort and also we can add a new case in the slider_template.js\r\n    file and create something new without too much new code\r\n\r\n    11) Next we create a component called NewsList and we do all the\r\n    necessary action like creating a new file, importing the required\r\n    libraries, exporting it and then importing it in this file and\r\n    there we use Transition group so we have to install it so we write\r\n    in the terminal npm install react-transition-group --save\r\n\r\n    12) Inside the NewsList we pass the following props type, loadmore,\r\n    start and amount \r\n\r\n    13) Go to newsList.js 1)\r\n\r\n    14) After the NewsList tag we create a new tag called VideoList\r\n    which is a component for the list of videos which we haven't\r\n    created yet we then pass all the props that we need and we create \r\n    the file with importing exportin etc.\r\n\r\n    15) Go to videosList.js 1) \r\n*/\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <NewsSlider\r\n                type = \"featured\"\r\n                start = {0}\r\n                amount = {3}\r\n                settings = {{\r\n                    dots: false\r\n                }}\r\n            />\r\n            <NewsList\r\n                type = \"card\"\r\n                loadmore = {true}\r\n                start = {3}\r\n                amount = {3}\r\n            />\r\n            <VideosList\r\n                type = \"card\"\r\n                title = {true}\r\n                loadmore = {false}\r\n                start = {0}\r\n                amount = {3}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport FontAwesome from 'react-fontawesome'\r\nimport \"./sidenav.css\"\r\n\r\n/*\r\n    1) First we create a div inside the return we give it a class name\r\n    so we ca style it, we create a CSS file, we import it and we just\r\n    apply the styles\r\n\r\n    2) We neeed to import Link and FontAwesome as well\r\n\r\n    3) Inside the div we create a Link to the home page and inside the\r\n    tag we create a FontAwesome icon for the home and then we write \r\n    Home but we need to style it a bit because it looks bad \r\n\r\n    4) After we style it it looks quite good and so what we can do \r\n    now is create a new div and put everything that we have inside it\r\n    and then we just copy the div with class name options and just \r\n    change the bits that we want to change\r\n\r\n    5) Something that is better though is to create a function called\r\n    showItems that is going to loop trough everything that we have and it\r\n    is going to output it so we create a list of all the things we want outputed\r\n    called items which are going to have different atributes like type,\r\n    icon, text, link etc.\r\n\r\n    6) Then we create the showItems function we are going to return \r\n    items.map which is going to runa loop trough the items and it is\r\n    going to returnt the following div which is the same as the one\r\n    fomr step 3) but instead of static values we are putting the \r\n    different values from the arrays like items.type etc.\r\n\r\n    7) We call the showItems function \r\n\r\n    8) Go to layoout.js 9)\r\n*/\r\n\r\nconst SideNavItems = () => {\r\n\r\n    const items = [\r\n        {\r\n            type: \"option\",\r\n            icon: 'sign-out-alt',\r\n            text: 'Sign out',\r\n            link: '/sign-out'\r\n        },\r\n        {\r\n            type: \"option\",\r\n            icon: 'home',\r\n            text: 'Home',\r\n            link: '/'\r\n        },\r\n        {\r\n            type: \"option\",\r\n            icon: 'file',\r\n            text: 'News',\r\n            link: '/news'\r\n        },\r\n        {\r\n            type: \"option\",\r\n            icon: 'play',\r\n            text: 'Videos',\r\n            link: '/videos'\r\n        },\r\n        {\r\n            type: \"option\",\r\n            icon: 'sign-in-alt',\r\n            text: 'Sign in',\r\n            link: '/sign-in'\r\n        }\r\n    ]\r\n\r\n    const showItems = () => {\r\n        return items.map( (item, i) => {\r\n            return(\r\n                <div key = {i} className = {item.type}>\r\n                    <Link to = {item.link}>\r\n                        <FontAwesome name = {item.icon}/>\r\n                        {item.text}\r\n                    </Link>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {showItems()}\r\n        </div>\r\n        /*\r\n        <div className = \"option\">\r\n            <Link to = \"/\">\r\n                <FontAwesome name = \"home\"/>\r\n                Home\r\n            </Link>\r\n        </div>\r\n        */\r\n    )\r\n}\r\n\r\nexport default SideNavItems","import React from 'react'\r\nimport SideNav from 'react-simple-sidenav'\r\n\r\nimport SideNavItems from './sideNav_items'\r\n\r\n/*\r\n    1) We create a simple function and we export it \r\n\r\n    2) Go to header.js 13)\r\n\r\n    3) We then import the SideNav dependency from React\r\n\r\n    4) Since this SideNavigation is recieving props we are going to\r\n    include it in the function \r\n\r\n    5) Then we create the SideNav tags inside the div and inside we\r\n    just write options to check if things work for now\r\n\r\n    6) Inside the opening SideNav we create the following attributes:\r\n    showNav and we set it equal to {props.showNav} and the showNav \r\n    inside the curly barckets is the showNav we've created in layout.js\r\n    and we do the same with onHideNav\r\n\r\n    7) Go to header.js 15)\r\n\r\n    8) And we can also add some in file styling with the navStyle\r\n    attribute\r\n\r\n    9) In order to get the items on the sidebar we create a new \r\n    component called SideNavItems and then we import it, create the\r\n    file etc.\r\n\r\n    10) Go to sideNav_items.js 1)\r\n*/\r\n\r\nconst SideNavigation = (props) => {\r\n    return (\r\n        <div>\r\n            <SideNav\r\n                showNav = {props.showNav}\r\n                onHideNav = {props.onHideNav}\r\n                navStyle = {{\r\n                    background:'#242424',\r\n                    maxWidth: '220px'\r\n                }}\r\n            >\r\n                <SideNavItems/>\r\n            </SideNav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideNavigation","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './Header.css'\r\n\r\nimport FontAwesome from 'react-fontawesome'\r\n\r\nimport SideNav from './sidenav/sideNav.js'\r\n\r\n/*\r\n    1) We create a basic Header function that returns an HTML header\r\n    tag with some static text so we can test wheter things work \r\n\r\n    2) We export the header component and since it is already imported\r\n    in the layout.js file we can keep on working here\r\n\r\n    3) We go to the header folder and we create a CSS file which we then\r\n    import and in the CSS file we add the styles that we want\r\n\r\n    4) in the return we give the header tag a class name and then inside\r\n    it we create a div and we give it a class name as well so now we\r\n    can style the components\r\n\r\n    5) After we finish styling we write {logo()} which is basically\r\n    going to return the logo function inside the header so the next step\r\n    is to create the logo function\r\n\r\n    6) We create the logo function and then we want to return a Link\r\n    but we first need to import Link after we do it then inside the \r\n    opening Link tag we write to = \"/\" which means that whenever \r\n    someone clicks the logo it is going to bring the user to the home\r\n    page and inside we have an img tag where we import the logo we\r\n    also give the img tag a class name so we can style it\r\n\r\n    7) Then before calling the logo() we write {navBars()} which again\r\n    is just a line of code that tells React to execute the navBars\r\n    function inside the retrun and of course the next step is to \r\n    create the nnacBars function\r\n\r\n    8) We create the navBars funcition which is going to return an\r\n    icon from FontAwesome we open a div and give it a class name so\r\n    we can style it and then we create a FontAwesome tag but first we\r\n    need to install in the terminal FontAwesome and then import it \r\n    in this file and the name inside the FontAwesome class is bars \r\n    which is going to return a hamburger like menu icon and then we\r\n    create in file styling with the style attribute and now we have\r\n    the initial desired look of the header but now we want to get\r\n    the functionality done so when we click the icon a sidenav will\r\n    appear and then we can close it\r\n\r\n    9) Go to layout.js 5)\r\n\r\n    10) Since we will be passing the props so we can use the functions\r\n    from layout.js we write props inside the function\r\n\r\n    11) We create a component called SideNav and we put the tag for\r\n    it inside the header tag before the div and the SideNav component\r\n    is going to need the functions from the Layout component and the\r\n    Header component that's why we write inside it {...props}\r\n\r\n    12) Go to sideNav.js 1)\r\n\r\n    13) After we create the SideNav component we have to import it\r\n\r\n    14) Go to sideNav.js 3) \r\n\r\n    15) And now in order for us to be able to open the sidenav we \r\n    need to catch somehow the information that we want and that is why\r\n    we passed the props and in the FontAwesome tag we set the attribute\r\n    onClick and that is where we pass the onOpenNav function so now\r\n    we have some kind of trigger to open the sidenav \r\n\r\n    16) Go to sideNav.js 8)\r\n*/\r\n\r\nconst Header = (props) => {\r\n\r\n    const navBars = () => (\r\n        <div className = \"bars\">\r\n            <FontAwesome name = \"bars\"\r\n                onClick = {props.onOpenNav}\r\n                style = {{\r\n                    color: '#dfdfdf',\r\n                    padding: '10px',\r\n                    cursor: 'pointer'\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n\r\n    const logo = () => (\r\n        <Link to = \"/\" className = {logo}>\r\n            <img alt = \"nba logo\" src = \"logo_transparent.png\"/>\r\n        </Link>\r\n    )\r\n\r\n    return (\r\n        <header className = \"header\">\r\n            <SideNav {...props}/>\r\n            <div className = \"headerOpt\">\r\n                {navBars()}\r\n                {logo()}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport './footer.css'\r\n\r\nimport { CURRENT_YEAR } from '../../config'\r\n\r\n/*\r\n    1) we create a basic component, impor react, export the component\r\n    and we create a css file i the folder so we can style the footer \r\n    we import the CSS file, we also import Link because we want the\r\n    logo to be a link to the home page we give the div class name \r\n    footer, and then we create the Link tag that is going to the \r\n    home page and has a class name of logo\r\n\r\n    2) Now with the copyright we have a static year and the way to \r\n    change it is to create a new file in the src folder called config.js\r\n    and inside we create a varibale called CURRENT_YEAR and we export\r\n    it and then we import it in the file that we want it imported to\r\n    and i our case this file and now we can use it here and instead\r\n    of writing a static year we write {CURRENT_YEAR}\r\n\r\n    3) then we are going to create a JSON server we get the database\r\n    into the directory of the file and then we have to install JSON\r\n    server install -g json-server and then we need to start the server\r\n    json-server --watch db.json --port 3004\r\n\r\n    4) Now instead of writing the long command everytime we want to \r\n    start the server we can simply go to the package.json file and \r\n    in the scripts section we can add \"dev-serv\": \"json-server --watch db.json --port 3004\"\r\n    and then when we want to start the server we just type \r\n    npm run dev-serv and this is going to start for us automatically the server\r\n    and dev-serv is the name that we gave the script and it can be\r\n    whatever we want it to be \r\n\r\n    5) Go to home.js\r\n*/\r\n\r\nconst Footer = () => (\r\n    <div className = \"footer\">\r\n        <Link to = \"/\" className = \"logo\">\r\n            <img alt = \"nba logo\" src = \"/images/nba_logo.png\"/>\r\n        </Link>\r\n        <div className = \"right\">\r\n            @NBA {CURRENT_YEAR} All rights reserved.\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Footer","import React, { Component } from 'react'\r\n\r\nimport './layout.css'\r\n\r\nimport Header from '../../components/header/header'\r\nimport Footer from '../../components/footer/footer'\r\n\r\n/*\r\n    1) First we create a basic structure of class Layout with a state\r\n    and we are going to render an empty div for now and finally we are going\r\n    to export Layout\r\n\r\n    2) Now if write something inside the div it is only going to return\r\n    what is in the div but not what is inside the Layout tag in the \r\n    routes.js file so in order to correct this we write {this.props.children}\r\n    and now we can put the Header before {this.props...} and Footer\r\n    after it and now when we create more routes inside Switch in hte\r\n    routes.js file we are always going to get the header and footer \r\n    regardless of the page we are in \r\n\r\n    3) We create a CSS file in the layout folder layout.css we add some\r\n    font families in the HTML file which we are going to use in this\r\n    CSS file and then we import the CSS file\r\n\r\n    4) Then with the Header we don't want a static text so we create\r\n    a Header component and put it before {this.props.children} again\r\n    before we create the file we can import header and then we create\r\n    the file header.js and we go to it to add the content that we want\r\n\r\n    5) So now in order to know whether we sould open the sidenav or\r\n    not we need to create a state for it and we just write showNav \r\n    and set it equal to false so initially when we go to the app\r\n    the navbar is not displayed\r\n\r\n    6) Then we go inside the Header tag and we put some attributes\r\n    the first one is showNav and we set it equal to the current \r\n    state that we have {this.state.showNav} then we create onHideNav\r\n    which is going to be hiding the side nav and we set it equal to \r\n    a function in our case this.toggleSidenav(false) where toggleSidenav\r\n    is a function that we are going to create in a bit and then inside\r\n    this function we pass the value false and finally we create a function\r\n    that is going to do exactly the oopisite called onOpenNav but this\r\n    time we set that one to pass true \r\n\r\n    7) We create the toggleSidenav function which takes action as an\r\n    instance which in the two functions below were either true or false\r\n    and then we write this.setState and we want to then set showNav \r\n    equal to action (whatever it has been passed) and this is going \r\n    to toggle the sidenav visibility \r\n\r\n    8) Go to header.js 10)\r\n\r\n    9) We create a file footer.js and we import the Footer component\r\n    and we change the static text with the component and now we can\r\n    create something better\r\n\r\n    10) Go to footer.js 1)\r\n*/\r\n\r\nclass Layout extends Component {\r\n    state = {\r\n        showNav: false\r\n    }\r\n\r\n    toggleSidenav = (action) => {\r\n        this.setState({\r\n            showNav: action\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Header\r\n                    showNav = {this.state.showNav}\r\n                    onHideNav = {() => this.toggleSidenav(false)}\r\n                    onOpenNav = {() => this.toggleSidenav(true)}\r\n                />\r\n                {this.props.children}\r\n                <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React from 'react'\r\n\r\nimport '../articles.css'\r\n\r\n/*\r\n    1) So right now what we do is just create the HTML part by passing\r\n    the dynamic values with props\r\n\r\n    2) Go back to header.js 4)\r\n*/\r\n\r\nconst TeamInfo = (props) => (\r\n    <div className = \"articleTeamHeader\">\r\n        <div className = \"left\"\r\n            style = {{\r\n                background: `url('/images/teams/${props.team.logo}')`\r\n            }}\r\n        >\r\n        </div>\r\n        <div className = \"right\">\r\n            <div>\r\n                <span>{props.team.city} {props.team.name}</span>\r\n            </div>\r\n            <div>\r\n                <strong>\r\n                    W{props.team.stats[0].wins}-L{props.team.stats[0].defeats}\r\n                </strong>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default TeamInfo","import React from 'react'\r\n\r\nimport '../articles.css'\r\n\r\nconst PostData = (props) => (\r\n    <div className = \"articlePostData\">\r\n    <div>\r\n        Date:\r\n        <span>{props.data.date}</span>\r\n    </div>\r\n    <div>\r\n        Author:\r\n        <span>{props.data.author}</span>\r\n    </div>\r\n    </div>\r\n)\r\n\r\nexport default PostData","import React from 'react'\r\n\r\nimport TeamInfo from '../../elements/teamInfo'\r\nimport PostData from '../../elements/postData'\r\n\r\n/*\r\n    1) We first create a function called teamInfo which we are going \r\n    to call in the div with instance the props teamData that we've\r\n    passed in index.js and it going to return either null or a new\r\n    component TeamInfo that we are going to create now \r\n\r\n    2) We create the component TeamInfo we import it, export it etc.\r\n\r\n    3) Go to teamInfo.js 1)\r\n\r\n    4) Now we create a function for the date and author and again we call\r\n    it and inside we create another component called PostData and\r\n    now we create it ana again inside we just create the template\r\n    and style it\r\n\r\n    5) Go to index.js 7)\r\n*/\r\n\r\nconst Header = (props) => {\r\n\r\n    const teamInfo = (team) => {\r\n        return team ? (\r\n            <TeamInfo team = {team}/>\r\n        ) : null\r\n    }\r\n\r\n    const postData = (date, author) => (\r\n        <PostData data = {{date, author}}/>\r\n    )\r\n\r\n    return(\r\n        <div>\r\n            {teamInfo(props.teamData)}\r\n            {postData(props.date, props.author)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport NewsArticles from '.';\r\n\r\nconst Body = (props) => {\r\n    return(\r\n        <div className = \"articleBody\">\r\n            <h1>{props.articleTitle}</h1>\r\n            <div className = \"articleImage\"\r\n                style = {{\r\n                    background: `url('/images/articles/${props.articleImage}')`\r\n                }}\r\n            ></div>\r\n            <div className = \"articleText\">\r\n                {props.articleBody}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport { URL } from '../../../../config'\r\n\r\nimport '../../articles.css'\r\n\r\nimport Header from \"./header\"\r\nimport Body from \"./body\"\r\n\r\n/*\r\n    1) First we create the states: articles which is an array and team\r\n    that is going to be storing the name of the team that the \r\n    articles is about \r\n\r\n    2) Then we create the ComponentWillMount function and again with\r\n    axios we fetch the information that we need and then with the\r\n    id we access it with this.props.match.params.id and after that\r\n    with .then we catch the information but this time we are going\r\n    to store the article in a variable and it is going to be equal\r\n    to response.data[0] then we run axios again and in the URL we\r\n    use the id of the team by taking it from article.team and then\r\n    we set the states of article and team where now we have the \r\n    article that we want and the team that we want\r\n\r\n    3) We create variables for the article and the team in render\r\n    which is going to save time when we are calling them \r\n\r\n    4) We create two new components Header and Body and we do all\r\n    the necessary steps import libraries, export them and import\r\n    them here\r\n\r\n    5) We pass all the necessary props in the Header tag\r\n\r\n    6) Go to header.js in the same directory \r\n\r\n    7) Now we just create the HTML and CSS part for the Body tag\r\n    and we are pretty much done \r\n\r\n    8) Go to routes.js 8)\r\n*/\r\n\r\nclass NewsArticles extends Component {\r\n\r\n    state = {\r\n        article:[],\r\n        team:[]\r\n    }\r\n\r\n    componentWillMount(){\r\n        axios.get(`${URL}/articles?id=${this.props.match.params.id}`)\r\n        .then( response => {\r\n            let article = response.data[0]\r\n\r\n            axios.get(`${URL}/teams?id=${article.team}`)\r\n            .then( response => {\r\n                this.setState({\r\n                    article,\r\n                    team: response.data\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const article = this.state.article\r\n        const team = this.state.team\r\n\r\n        return(\r\n            <div className = \"articleWrapper\">\r\n                <Header\r\n                    teamData = {team[0]}\r\n                    date = {article.date}\r\n                    author = {article.author}\r\n                />\r\n                <Body\r\n                    articleTitle = {article.title}\r\n                    articleBody = {article.body}\r\n                    articleImage = {article.image}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewsArticles","import React from 'react'\r\n\r\nimport TeamInfo from '../../elements/teamInfo'\r\n\r\nconst Header = (props) => {\r\n\r\n    const teamInfo = (team) => {\r\n        return team ? (\r\n            <TeamInfo team = {team}/>\r\n        ): null\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {teamInfo(props.teamData)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nimport '../videosList.css'\r\n\r\nimport VideoTemplate from '../videoTemplate'\r\n\r\nconst VideosRelated = (props) => (\r\n    <div className = \"relatedWrapper\">\r\n        <VideoTemplate\r\n            data = {props.data}\r\n            teams = {props.teams}\r\n        />\r\n    </div>\r\n)\r\n\r\nexport default VideosRelated","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport { URL } from '../../../../config'\r\n\r\nimport '../../articles.css'\r\n\r\nimport Header from './header'\r\nimport VideosRelated from '../../../widgets/VideosList/videosRelated/videosRelated'\r\n\r\n/*\r\n    1) Here we do basically the same thing we did with the text articles\r\n    we create the states and we even copy eveyrthing in componentWillMount\r\n    function and we just change articles with vides the first time\r\n    we use axios \r\n\r\n    2) Again we do the exact same thing again we write a Header tag\r\n    and we pass as props the necessary information and we also create\r\n    variables for calling the instances of the states\r\n\r\n    3) After the Header we create the markup for the title and video\r\n    which is basic HTML and then style it which is CSS\r\n\r\n    4) Now we create a function called getRelated which is going to \r\n    find related videos to the one that we have and we get that \r\n    function called in the componentWillMount function at the end \r\n\r\n    5) Now for the function itself we use axios to first get the\r\n    teams and then we store them in a variable called teams then\r\n    we call axios again and this time in the URL we type ?q= and then\r\n    we set that equal to this.state.team[0].city which will filter\r\n    everything in the JSON file that matches the city of the team\r\n    we have and then with &_limit=3 we limit the results found to 3\r\n    and finally with setState we update the states of teams and related\r\n    new states that we add\r\n\r\n    6) We then create a new component that is going to output the \r\n    related videos called RelatedVideos and we pass the needed \r\n    props in it\r\n\r\n    7) In the videoRelated.js file we just use VideoTemplated \r\n    component which makes it pretty simple to make things happen\r\n*/\r\n\r\nclass VideoArticle extends Component {\r\n\r\n    state = {\r\n        article:[],\r\n        team:[],\r\n        teams:[],\r\n        related:[]\r\n    }\r\n\r\n    componentWillMount(){\r\n        axios.get(`${URL}/videos?id=${this.props.match.params.id}`)\r\n        .then( response => {\r\n            let article = response.data[0]\r\n\r\n            axios.get(`${URL}/teams?id=${article.team}`)\r\n            .then( response => {\r\n                this.setState({\r\n                    article,\r\n                    team: response.data\r\n                })\r\n                this.getRelated()\r\n            })\r\n        })\r\n    }\r\n\r\n    getRelated = () => {\r\n        axios.get(`${URL}/teams`)\r\n        .then( response => {\r\n            let teams = response.data\r\n\r\n            axios.get(`${URL}/videos?q=${this.state.team[0].city}&_limit=3`)\r\n            .then( response => {\r\n                this.setState({\r\n                    teams,\r\n                    related:response.data\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const article = this.state.article\r\n        const team = this.state.team\r\n\r\n        return(\r\n            <div>\r\n                <Header teamData = {team[0]}/>\r\n                <div className = \"videoWrapper\">\r\n                    <h1>\r\n                        {article.title}\r\n                    </h1>\r\n                    <iframe\r\n                        title = \"videoplayer\"\r\n                        width = \"100%\"\r\n                        height = \"300px\"\r\n                        src = {`https://www.youtube.com/embed/${article.url}`}\r\n                    >\r\n                    </iframe>\r\n                </div>\r\n                <VideosRelated\r\n                    data = {this.state.related}\r\n                    teams = {this.state.teams}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoArticle","import React from 'react'\r\n\r\nimport NewsSlider from './../../../widgets/newsSlider/slider'\r\nimport NewsList from './../../../widgets/NewsList/newsList'\r\n\r\nconst MainNews = () => {\r\n    return(\r\n        <div>\r\n            <NewsSlider\r\n                type = \"featured\"\r\n                start = {0}\r\n                amount = {3}\r\n                settings = {{\r\n                    dots: false\r\n                }}\r\n            />\r\n            <NewsList\r\n                type = \"cardMain\"\r\n                loadmore = {true}\r\n                start = {3}\r\n                amount = {10}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainNews","import React from 'react'\r\n\r\nimport VideosList from '../../../widgets/VideosList/videosList'\r\n\r\nconst VideosMain = () => {\r\n    return(\r\n        <div>\r\n            <VideosList\r\n                type = \"card\"\r\n                title = {true}\r\n                loadmore = {false}\r\n                start = {0}\r\n                amount = {7}\r\n            />\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default VideosMain","import React, { Component } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nimport Home from './components/home/home'\r\nimport Layout from './hoc/layout/layout'\r\nimport NewsArticle from './components/articles/news/post/index'\r\nimport VideoArticle from './components/articles/videos/video/index'\r\nimport NewsMain from './components/articles/news/main/mainNews'\r\nimport VideosMain from './components/articles/videos/videoMain/videoMain'\r\n\r\n/*\r\n    1) First we create a class Routes in which we use the Switch tag\r\n    which will allow us to switch between pages and inside the \r\n    Switch tags we creat the first Route - for the home page - path\r\n    is set to just / so it shows just when the URL matches the basic\r\n    URL it is set to exact so the home page doesn't show up everywehere\r\n    where we have a / and on component we set it equal to Home which\r\n    we still don't have but we are going to create on the next point\r\n\r\n    2) Then we create the home page in the the components folder\r\n    and we import it and now we go to home.js where we create a \r\n    simple component that just return the text \"home\" nothing\r\n    special there so far\r\n\r\n    3) Then we export Routes on the last line\r\n\r\n    4) After that we are going to create the Layout. We wrap the Switch tags\r\n    in Layout tags we don't have Layout at this stage but we are going \r\n    to import it from the hoc folder anyway and we are going to \r\n    create it in the next step\r\n\r\n    5) Editing the layout.js file go to layout.js\r\n\r\n    6) We create a route for the different articles with the path \r\n    being /article/:id where id would be dynamic and it is going to\r\n    be the id of the article it is exact and the component is \r\n    NewsArticle that we are going to create in the widgets foldrer\r\n    we import it here then we create, we create a CSS we import all\r\n    the necessary libraries and we export it \r\n\r\n    7) Go to index.js in the one that is in the following path\r\n    components/articles/news/post 1)\r\n\r\n    8) We create a Route for the different video articles the same\r\n    way we did for the text articles and now we just create the \r\n    component which is called VideoArticle and again we use the same\r\n    hiearchy as before we create an index.js file and a header.js\r\n    file \r\n\r\n    9) Go to the folder of the videos to index.js 1)\r\n*/\r\n\r\nclass Routes extends Component {\r\n    render(){\r\n        return(\r\n            <Layout>\r\n                <Switch>\r\n                    <Route path = \"/\" exact component = {Home}/>\r\n                    <Route path = \"/news\" exact component = {NewsMain}/>\r\n                    <Route path = \"/videos\" exact component = {VideosMain}/>\r\n                    <Route path = \"/articles/:id\" exact component = {NewsArticle}/>\r\n                    <Route path = \"/videos/:id\" exact component = {VideoArticle}/>\r\n                </Switch>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\n\nimport Routes from './routes'\n\n/*\n    1) First we import BrowserRouter which is going to let us go to \n    a page that matches the URL for example / for home /players etc\n\n    2) We create an App function that is going to return Routes which\n    is in routes.js and there we specify the different URLs and in\n    order for this to work we import the routes.js file right after\n    we import the components\n\n    3) Go to routes.js and follow through\n*/\n\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <Routes/>\n        </BrowserRouter>\n    )\n}\n\n/*\n    This is telling React to return App in the HTML document in the\n    div with id root which is pretty basic but a really important \n    step\n*/\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}